// 第六章 树 
// 树的逻辑结构、树的实现和树的应用
// 6.1 树的定义

// 树状结构的特点是只有一个直接前驱，但可以有很多个后继
// 按分支和层次组织，具有层次和从属关系

// 树的递归定义：（所以操作几乎也都为递归实现）
// 树是n个结点的有限集合/空集，满足以下条件：
// 1.有一个被称为根的节点
// 2.其余节点可分为m个互不相交的集合，这些集合本身也是一棵树（子数）。

// 6.1.1 树的基本术语
// (1)根节点、叶节点、内部节点
// (2)结点的度(一个结点直接后继的数目)、树的度(结点的度的最大值)
// (3)子结点、父结点、祖先节点(到根节点的唯一路径)、子孙节点(所有子树)
// (4)兄弟节点(同一个节点的子结点)
// (5)结点的层次(深度，第几代，L层子结点L+1层)、高度(以该节点为根的子树的高度)、树的高度(结点的最大层次)
// (6)有序树和无序树（一般二叉树有序(顺序有意义)，三叉以上无序）
// (7)森林(互不相交的树的集合)

// 6.1.2 树的基本运算
// 代码清单6-1 树的抽象类
template<class T>
class tree{
public:
    virtual void clear() = 0;
    virtual bool isEmpty() const = 0;
    virtual T root(T flag) const = 0;
    virtual T parent(T x, T flag) const = 0;
    virtual T child(T x, T flag) const = 0;
    virtual void remove(T x, int i) = 0;
    virtual void traverse() const = 0;
}
// checked with PPT
